namespace Qowaiv.TestTools.Generation;

public static class RegionConstants
{
    public static void Generate()
    {
        var all = Data();

        using var w = new StreamWriter(Solution.Root.File("src/Qowaiv/Generated/Globalization/Region.consts.generated.cs").FullName);

        w.WriteLine(@"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------");
        w.WriteLine();
        w.WriteLine("namespace Qowaiv.Globalization;");
        w.WriteLine();
        w.WriteLine("public readonly partial struct Region");
        w.WriteLine("{");

        var first = true;

        foreach (var kvp in all)
        {
            if (!first) w.WriteLine();
            first = false;

            var country = Country.Parse(kvp.Key);

            w.WriteLine($"    /// <summary>Describes {country.EnglishName} ({country.Name}) regions.</summary>");
            w.WriteLine($"    public static class {kvp.Key}");
            w.WriteLine(@"    {");

            var f = true;

            foreach (var region in kvp.Value)
            {
                if (!f) w.WriteLine();
                f = false;

                var name = region.Code.Split('-')[1];
                name = name == kvp.Key || ASCII.IsDigit(name[0]) ? $"_{name}" : name;

                w.WriteLine($"        /// <summary>Describes {country.EnglishName} ({country.Name}) regions.</summary>");
                w.WriteLine($"        public static readonly Region {name} = new(\"{region.Code}\");");
            }

            w.WriteLine(@"    }");
        }
        w.WriteLine("}");
        w.Flush();
    }


    private static IReadOnlyDictionary<string, List<RegionData>> Data()
    {
        using var w = new StreamReader(Solution.Root.File("specs/Qowaiv.Specs/TestTools/Generation/ISO-3166-2.csv").FullName);

        var data = new List<RegionData>();

        while (w.ReadLine() is { } line)
        {
            data.Add(RegionData.Parse(line));
        }

        return data
            .Skip(1)
            .Where(d => d.Code != "-")
            .GroupBy(d => d.Country)
            .OrderBy(g => g.Key)
            .ToDictionary(g => g.Key, g => g.ToList());
    }

    private record RegionData
    {
        public required string Country { get; init; }
        public required string Name { get; init; }
        public required string Code { get; init; }

        public static RegionData Parse(string line)
        {
            var parts = line.Split(@""",""");
            return new()
            {
                Country = parts[0].Trim('"'),
                Name = parts[1].Trim('"'),
                Code = parts[2].Trim('"'),
            };
        }
    }
}
