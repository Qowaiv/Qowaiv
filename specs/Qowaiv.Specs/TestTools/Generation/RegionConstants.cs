using System.Text.Json;

namespace Qowaiv.TestTools.Generation;

public static class RegionConstants
{
    public static void Generate()
    {
        var data = new Dictionary<string, CountryData>();

        foreach (var json in Json())
        {
            if (!data.TryGetValue(json.Key, out var country))
            {
                country = new() { Code = json.Key };
                data[country.Code] = country;
            }

            foreach (var kvp in json.Value)
            {
                country.Regions.Add(new RegionData()
                {
                    Code = kvp.Key,
                    LocalName = kvp.Value.LocalName,
                    Name = kvp.Value.Name,
                    ParentCode = kvp.Value.ParentCode,
                    Type = kvp.Value.Type,
                });
            }
        }

        foreach (var csv in Csv())
        {
            var c = data[csv.Key];

            foreach (var value in csv.Value)
            {
                var r = c.Regions.FirstOrDefault(x => x.Code == value.Code);

                if (r is null)
                {
                    Console.WriteLine($"{value.Code} does not exist");
                }
                else if (r.Name != value.Name)
                {
                    Console.WriteLine($"{value.Code} '{value.Name}' != '{r.Name}'");
                }
            }
        }

        var countries = data.Values;

        var types = countries.SelectMany(c => c.Regions).Select(r => r.Type).Distinct().ToArray();

        using var w = new StreamWriter(Solution.Root.File("src/Qowaiv/Generated/Globalization/Region.consts.generated.cs").FullName);

        w.WriteLine(@"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------");
        w.WriteLine();
        w.WriteLine("namespace Qowaiv.Globalization;");
        w.WriteLine();
        w.WriteLine("public readonly partial struct Region");
        w.WriteLine("{");

        var first = true;

        foreach (var country in countries.Where(c => c.Regions.Any()))
        {
            if (!first) w.WriteLine();
            first = false;

            w.WriteLine($"    /// <summary>Describes {country.Data.EnglishName} ({country.Code}) regions.</summary>");
            w.WriteLine($"    public static class {country.Code}");
            w.WriteLine(@"    {");

            var f = true;

            foreach (var region in country.Regions)
            {
                if (!f) w.WriteLine();
                f = false;

                w.WriteLine($"        /// <summary>Describes the region {region.Name} ({region.Code}).</summary>");
                w.WriteLine($"        public static readonly Region {region.Property} = new(\"{region.Code}\");");
            }

            w.WriteLine(@"    }");
        }
        w.WriteLine("}");
        w.Flush();
    }

    private static IReadOnlyDictionary<string, List<RegionCsv>> Csv()
    {
        using var w = new StreamReader(Solution.Root.File("specs/Qowaiv.Specs/TestTools/Generation/ISO-3166-2.csv").FullName);

        var data = new List<RegionCsv>();

        while (w.ReadLine() is { } line)
        {
            data.Add(RegionCsv.Parse(line));
        }

        return data
            .Skip(1)
            .Where(d => d.Code != "-")
            .GroupBy(d => d.Country)
            .OrderBy(g => g.Key)
            .ToDictionary(g => g.Key, g => g.ToList());
    }

    private static Dictionary<string, Dictionary<string, RegionJson>> Json()
    {
        using var w = new StreamReader(Solution.Root.File("specs/Qowaiv.Specs/TestTools/Generation/ISO-3166-2.json").FullName);

        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };

        return JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, RegionJson>>>(w.ReadToEnd(), options)!;
    }

    private sealed record RegionCsv
    {
        public required string Country { get; init; }
        public required string Name { get; init; }
        public required string Code { get; init; }

        public static RegionCsv Parse(string line)
        {
            var parts = line.Split(@""",""");
            return new()
            {
                Country = parts[0].Trim('"'),
                Name = parts[1].Trim('"'),
                Code = parts[2].Trim('"'),
            };
        }
    }

    private sealed record RegionJson
    {
        public decimal[] latLng { get; init; } = [];
        public string? LocalName { get; init; }
        public string? Name { get; init; }
        public string? ParentCode { get; init; }
        public string? Type { get; init; }
    }

    private sealed record CountryData
    {
        public required string Code { get; init; }
        public Country Data => Country.Parse(Code);
        public List<RegionData> Regions { get; init; } = [];
    }
    private sealed record RegionData
    {
        public required string Code { get; init; }
        public string? Name { get; init; }
        public string? LocalName { get; init; }
        public string? ParentCode { get; init; }
        public string? Type { get; init; }

        public string Property
        {
            get
            {
                var splitted = Code.Split('-');
                var name = splitted[1];
                name = name == splitted[0] || ASCII.IsDigit(name[0]) ? $"_{name}" : name;
                return name;
            }
        }
    }
}
