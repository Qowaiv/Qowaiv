using Qowaiv.CodeGeneration.Syntax;

namespace Qowaiv.CodeGeneration.SingleValueObjects;

public sealed class IdTemplate(IdParameters parameters) : Code
{
    private static readonly CodeSnippet Snippet
        = Embedded.Snippet("Behavior.Structure")
        + Embedded.Snippet("IEmpty")
        + Embedded.Snippet("Behavior.IComparable")
        + Embedded.Snippet("IEquatable")
        + Embedded.Snippet("Behavior.IFormattable")
        + Embedded.Snippet("Behavior.Json")
        + Embedded.Snippet("Behavior.IXmlSerializable")
        + Embedded.Snippet("Behavior.Identifier")
        + Embedded.Snippet("Behavior.IParsable")
        + Embedded.Snippet("Behavior.Create");

    private readonly IdParameters Parameters = parameters;

    /// <inheritdoc />
    public void WriteTo(CSharpWriter writer) => Guard.NotNull(writer)
        .Write(Headers.AutoGenerated())
        .Write(Headers.EnableNullability)
        .Write(Headers.DisableWarnings)
        .Write(Snippet
            .Transform(line => line
                .Replace("@Svo", Parameters.Svo)
                .Replace("@Behavior", Parameters.Behavior)
                .Replace("@Raw", $"global::{Parameters.Raw}")
                .Replace("@Namespace", Parameters.Namespace.ToString()))
            .Transform([Parameters.Raw == "System.String" ? new("StringBased") : new("NotStringBased")]));

    /// <inheritdoc />
    [Pure]
    public override string ToString() => this.Stringify();
}
