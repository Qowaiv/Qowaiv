using System.Reflection;

namespace Qowaiv.CodeGeneration.Syntax;

/// <summary>File headers.</summary>
public static class Headers
{
    /// <summary>
    /// Provides a header to indicate that #pragma warnings have been disabled.
    /// </summary>
    public static readonly DisableWarningsHeader DisableWarnings = new();

    /// <summary>
    /// Provides a header to indicate that nullability has been enabled.
    /// </summary>
    public static readonly NullableHeader EnableNullability = new();

    /// <summary>Provides a header to indicate that the code in the file has been generated.</summary>
    /// <param name="toolchain">
    /// The tools used to generate the code.
    /// </param>
    /// <remarks>
    /// Every involved assembly is added to the header with its version. If no this not
    /// preferred, an empty collection should be passed as an argument.
    /// </remarks>
    [Pure]
    public static AutoGeneratedHeader AutoGenerated(IEnumerable<Assembly>? toolchain = null) => new(toolchain);
}

/// <summary>
/// Represents a file header to indicate that #pragma warnings have been disabled.
/// </summary>
public sealed class DisableWarningsHeader : Code
{
    internal DisableWarningsHeader() { }

    /// <inheritdoc />
    public void WriteTo(CSharpWriter writer) => Guard.NotNull(writer)
        .Line("#pragma warning disable")
        .Line();

    /// <inheritdoc />
    [Pure]
    public override string ToString() => this.Stringify();
}

/// <summary>
/// Represents a file header to indicate that nullability has been enabled.
/// </summary>
public sealed class NullableHeader : Code
{
    internal NullableHeader() { }

    /// <inheritdoc />
    public void WriteTo(CSharpWriter writer) => Guard.NotNull(writer)
        .Line("#nullable enable")
        .Line();
}
