// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     - Qowaiv.CodeGeneration                    0.0.1-alpha-017
//     - Qowaiv.CodeGeneration.SingleValueObjects 1.0.0
//     - Qowaiv.CodeGeneration.Specs              1.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

namespace Qowaiv;

public partial struct YearMonth
{
    private YearMonth(int value) => m_Value = value;

    /// <summary>The inner value of the year-month.</summary>
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly int m_Value;
}

public partial struct YearMonth : IEquatable<YearMonth>
#if NET8_0_OR_GREATER
    , IEqualityOperators<YearMonth, YearMonth, bool>
#endif
{
    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) => obj is YearMonth other && Equals(other);

    /// <summary>Returns true if this instance and the other year-month are equal, otherwise false.</summary>
    /// <param name="other">The <see cref="YearMonth" /> to compare with.</param>
    [Pure]
    public bool Equals(YearMonth other) => m_Value == other.m_Value;

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => Hash.Code(m_Value);

    /// <summary>Returns true if the left and right operand are equal, otherwise false.</summary>
    /// <param name="left">The left operand.</param>
    /// <param name="right">The right operand</param>
    public static bool operator ==(YearMonth left, YearMonth right) => left.Equals(right);

    /// <summary>Returns true if the left and right operand are not equal, otherwise false.</summary>
    /// <param name="left">The left operand.</param>
    /// <param name="right">The right operand</param>
    public static bool operator !=(YearMonth left, YearMonth right) => !(left == right);
}
public partial struct YearMonth : IComparable, IComparable<YearMonth>
#if NET8_0_OR_GREATER
    , IComparisonOperators<YearMonth, YearMonth, bool>
#endif
{
    /// <inheritdoc />
    [Pure]
    public int CompareTo(object? obj)
    {
        if (obj is null) { return 1; }
        else if (obj is YearMonth other) { return CompareTo(other); }
        else { throw new ArgumentException($"Argument must be {GetType().Name}.", nameof(obj)); }
    }
    /// <inheritdoc />
    [Pure]
#nullable disable
    public int CompareTo(YearMonth other) => Comparer<int>.Default.Compare(m_Value, other.m_Value);
#nullable enable
    /// <summary>Returns true if the left operator is less then the right operator, otherwise false.</summary>
    public static bool operator <(YearMonth l, YearMonth r) => l.CompareTo(r) < 0;

    /// <summary>Returns true if the left operator is greater then the right operator, otherwise false.</summary>
    public static bool operator >(YearMonth l, YearMonth r) => l.CompareTo(r) > 0;

    /// <summary>Returns true if the left operator is less then or equal the right operator, otherwise false.</summary>
    public static bool operator <=(YearMonth l, YearMonth r) => l.CompareTo(r) <= 0;

    /// <summary>Returns true if the left operator is greater then or equal the right operator, otherwise false.</summary>
    public static bool operator >=(YearMonth l, YearMonth r) => l.CompareTo(r) >= 0;
}
public partial struct YearMonth : IFormattable
{
    /// <summary>Returns a <see cref="string"/> that represents the year-month.</summary>
    [Pure]
    public override string ToString() => ToString(format: null, formatProvider: null);

    /// <summary>Returns a formatted <see cref="string"/> that represents the year-month.</summary>
    /// <param name="format">
    /// The format that describes the formatting.
    /// </param>
    [Pure]
    public string ToString(string? format) => ToString(format, formatProvider: null);

    /// <summary>Returns a formatted <see cref="string"/> that represents the year-month.</summary>
    /// <param name="provider">
    /// The format provider.
    /// </param>
    [Pure]
    public string ToString(IFormatProvider? provider) => ToString(format: null, provider);
}
#if NET8_0_OR_GREATER
#else
public partial struct YearMonth : ISerializable
{
    /// <summary>Initializes a new instance of the year-month based on the serialization info.</summary>
    /// <param name="info">The serialization info.</param>
    /// <param name="context">The streaming context.</param>
    private YearMonth(SerializationInfo info, StreamingContext context)
    {
        Guard.NotNull(info);
        m_Value = info.GetValue("Value", typeof(int)) is int val ? val : default(int);
    }

    /// <summary>Adds the underlying property of the year-month to the serialization info.</summary>
    /// <param name="info">The serialization info.</param>
    /// <param name="context">The streaming context.</param>
    void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
        => Guard.NotNull(info).AddValue("Value", m_Value);
}
#endif

public partial struct YearMonth
{
    /// <summary>Creates the year-month from a JSON string.</summary>
    /// <param name="json">
    /// The JSON string to deserialize.
    /// </param>
    /// <returns>
    /// The deserialized year-month.
    /// </returns>
    [Pure]
    public static YearMonth FromJson(string? json) => Parse(json, CultureInfo.InvariantCulture);
}
public partial struct YearMonth : IXmlSerializable
{
    /// <summary>Gets the <see href="XmlSchema" /> to XML (de)serialize the year-month.</summary>
    /// <remarks>
    /// Returns null as no schema is required.
    /// </remarks>
    [Pure]
    XmlSchema? IXmlSerializable.GetSchema() => (XmlSchema?)null;

    /// <summary>Reads the year-month from an <see href="XmlReader" />.</summary>
    /// <param name="reader">An XML reader.</param>
    void IXmlSerializable.ReadXml(XmlReader reader)
    {
        Guard.NotNull(reader);
        var xml = reader.ReadElementString();
        System.Runtime.CompilerServices.Unsafe.AsRef(in this) = Parse(xml, CultureInfo.InvariantCulture);
    }

    /// <summary>Writes the year-month to an <see href="XmlWriter" />.</summary>
    /// <remarks>
    /// Uses <see cref="ToXmlString()"/>.
    /// </remarks>
    /// <param name="writer">An XML writer.</param>
    void IXmlSerializable.WriteXml(XmlWriter writer)
        => Guard.NotNull(writer).WriteString(ToXmlString());
}
public partial struct YearMonth
#if NET8_0_OR_GREATER
    : IParsable<YearMonth>
#endif
{
    /// <summary>Converts the <see cref="string"/> to <see cref="YearMonth"/>.</summary>
    /// <param name="s">
    /// A string containing the year-month to convert.
    /// </param>
    /// <returns>
    /// The parsed year-month.
    /// </returns>
    /// <exception cref="FormatException">
    /// <paramref name="s"/> is not in the correct format.
    /// </exception>
    [Pure]
    public static YearMonth Parse(string? s)
        => TryParse(s, null, out var svo)
            ? svo
            : throw Unparsable.ForValue<YearMonth>(s, QowaivMessages.FormatExceptionYearMonth);

    /// <summary>Converts the <see cref="string"/> to <see cref="YearMonth"/>.</summary>
    /// <param name="s">
    /// A string containing the year-month to convert.
    /// </param>
    /// <param name="provider">
    /// The specified format provider.
    /// </param>
    /// <returns>
    /// The parsed year-month.
    /// </returns>
    /// <exception cref="FormatException">
    /// <paramref name="s"/> is not in the correct format.
    /// </exception>
    [Pure]
    public static YearMonth Parse(string? s, IFormatProvider? provider)
        => TryParse(s, provider, out var svo)
            ? svo
            : throw Unparsable.ForValue<YearMonth>(s, QowaivMessages.FormatExceptionYearMonth);

    /// <summary>Converts the <see cref="string"/> to <see cref="YearMonth"/>.</summary>
    /// <param name="s">
    /// A string containing the year-month to convert.
    /// </param>
    /// <returns>
    /// The year-month if the string was converted successfully, otherwise default.
    /// </returns>
    [Pure]
    public static YearMonth? TryParse(string? s)
        => TryParse(s, null, out var val)
            ? val
            : default(YearMonth?);

    /// <summary>Converts the <see cref="string"/> to <see cref="YearMonth"/>.</summary>
    /// <param name="s">
    /// A string containing the year-month to convert.
    /// </param>
    /// <param name="provider">
    /// The specified format provider.
    /// </param>
    /// <returns>
    /// The year-month if the string was converted successfully, otherwise default.
    /// </returns>
    [Pure]
    public static YearMonth? TryParse(string? s, IFormatProvider? provider)
        => TryParse(s, provider, out var val)
            ? val
            : default(YearMonth?);

    /// <summary>Converts the <see cref="string"/> to <see cref="YearMonth"/>.
    /// A return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="s">
    /// A string containing the year-month to convert.
    /// </param>
    /// <param name="result">
    /// The result of the parsing.
    /// </param>
    /// <returns>
    /// True if the string was converted successfully, otherwise false.
    /// </returns>
    [Impure]
    public static bool TryParse(string? s, out YearMonth result) => TryParse(s, null, out result);
}