<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentException_InvalidWildcardPattern" xml:space="preserve">
    <value>The wildcard pattern is invalid.</value>
  </data>
  <data name="ArgumentException_Must" xml:space="preserve">
    <value>Argument must be {0}</value>
  </data>
  <data name="ArgumentException_NotIFormattable" xml:space="preserve">
    <value>The argument must implement System.IFormattable.</value>
  </data>
  <data name="ArgumentException_TimestampArrayShouldHaveSize8" xml:space="preserve">
    <value>The byte array should have size of 8.</value>
  </data>
  <data name="ArgumentOutOfRange_DecimalRound" xml:space="preserve">
    <value>Decimals can only round to between -28 and 28 digits of precision.</value>
  </data>
  <data name="ArgumentOutOfRange_FractionError" xml:space="preserve">
    <value>The allowed error when converting a Decimal to a Fraction should be between Fraction.Epsilon and 1.</value>
  </data>
  <data name="ArgumentOutOfRange_PercentageRound" xml:space="preserve">
    <value>Percentages can only round to between -26 and 26 digits of precision.</value>
  </data>
  <data name="ArgumentOutOfRangeException_DateSpan" xml:space="preserve">
    <value>The specified years, months and days results in an un-representable DateSpan.</value>
  </data>
  <data name="ArgumentOutOfRange_Elo" xml:space="preserve">
    <value>The number can not represent an Elo.</value>
  </data>
  <data name="CurrencyMismatchException" xml:space="preserve">
    <value>The {0} operation could not be applied. There is a mismatch between {1} and {2}.</value>
  </data>
  <data name="FormatException_IndexOutOfRange" xml:space="preserve">
    <value>Index (zero based) must be greater than or equal to zero and less than the size of the argument list.</value>
  </data>
  <data name="FormatException_InvalidFormat" xml:space="preserve">
    <value>Input string was not in a correct format.</value>
  </data>
  <data name="FormatExceptionBase32" xml:space="preserve">
    <value>Not a valid Base32 string</value>
  </data>
  <data name="FormatExceptionBusinessIdentifierCode" xml:space="preserve">
    <value>Not a valid BIC</value>
  </data>
  <data name="FormatExceptionCountry" xml:space="preserve">
    <value>Not a valid country</value>
  </data>
  <data name="FormatExceptionCryptographicSeed" xml:space="preserve">
    <value>No a valid cryptographic seed</value>
  </data>
  <data name="FormatExceptionCurrency" xml:space="preserve">
    <value>Not a valid currency</value>
  </data>
  <data name="FormatExceptionDate" xml:space="preserve">
    <value>Not a valid date</value>
  </data>
  <data name="FormatExceptionDateSpan" xml:space="preserve">
    <value>Not a valid date span</value>
  </data>
  <data name="FormatExceptionElo" xml:space="preserve">
    <value>Not a valid Elo</value>
  </data>
  <data name="FormatExceptionEmailAddress" xml:space="preserve">
    <value>Not a valid email address</value>
  </data>
  <data name="FormatExceptionEmailAddressCollection" xml:space="preserve">
    <value>Not valid email addresses</value>
  </data>
  <data name="FormatExceptionFinancialAmount" xml:space="preserve">
    <value>Not a valid amount</value>
  </data>
  <data name="FormatExceptionFraction" xml:space="preserve">
    <value>Not a valid fraction</value>
  </data>
  <data name="FormatExceptionGender" xml:space="preserve">
    <value>Not a valid gender</value>
  </data>
  <data name="FormatExceptionHouseNumber" xml:space="preserve">
    <value>Not a valid house number</value>
  </data>
  <data name="FormatExceptionInternationalBankAccountNumber" xml:space="preserve">
    <value>Not a valid IBAN</value>
  </data>
  <data name="FormatExceptionInternetMediaType" xml:space="preserve">
    <value>Not a valid internet media type</value>
  </data>
  <data name="FormatExceptionLocalDateTime" xml:space="preserve">
    <value>Not valid date</value>
  </data>
  <data name="FormatExceptionMoney" xml:space="preserve">
    <value>Not a valid amount</value>
  </data>
  <data name="FormatExceptionMonth" xml:space="preserve">
    <value>Not a valid month</value>
  </data>
  <data name="FormatExceptionPercentage" xml:space="preserve">
    <value>Not a valid percentage</value>
  </data>
  <data name="FormatExceptionPostalCode" xml:space="preserve">
    <value>Not a valid postal code</value>
  </data>
  <data name="FormatExceptionQGuid" xml:space="preserve">
    <value>Not a valid GUID</value>
  </data>
  <data name="FormatExceptionStreamSize" xml:space="preserve">
    <value>Not a valid stream size</value>
  </data>
  <data name="FormatExceptionTimestamp" xml:space="preserve">
    <value>Not a valid SQL timestamp</value>
  </data>
  <data name="FormatExceptionUuid" xml:space="preserve">
    <value>Not a valid GUID</value>
  </data>
  <data name="FormatExceptionWeekDate" xml:space="preserve">
    <value>Not a valid week date</value>
  </data>
  <data name="FormatExceptionYear" xml:space="preserve">
    <value>Not a valid year</value>
  </data>
  <data name="FormatExceptionYesNo" xml:space="preserve">
    <value>Not a valid yes-no value</value>
  </data>
  <data name="InvalidCastException_FromTo" xml:space="preserve">
    <value>Cast from {0} to {1} is not valid.</value>
  </data>
  <data name="InvalidOperationException_NoElements" xml:space="preserve">
    <value>Sequence contains no elements.</value>
  </data>
  <data name="InvalidOperationException_WithDisplayName" xml:space="preserve">
    <value>An not set email address can not be shown with a display name.</value>
  </data>
  <data name="JsonSerialization_DateTimeNotSupported" xml:space="preserve">
    <value>JSON deserialization from a date is not supported.</value>
  </data>
  <data name="JsonSerialization_DoubleNotSupported" xml:space="preserve">
    <value>JSON deserialization from a number is not supported.</value>
  </data>
  <data name="JsonSerialization_InputNotSupported" xml:space="preserve">
    <value>Input '{0}' not supported. Expects '{1}'.</value>
  </data>
  <data name="JsonSerialization_Int64NotSupported" xml:space="preserve">
    <value>JSON deserialization from an integer is not supported.</value>
  </data>
  <data name="JsonSerialization_NullNotSupported" xml:space="preserve">
    <value>JSON deserialization from null is not supported.</value>
  </data>
  <data name="JsonSerialization_ResultTypeNotSupported" xml:space="preserve">
    <value>Result type '{0}' not supported. Expects '{1}'.</value>
  </data>
  <data name="JsonSerialization_TokenNotSupported" xml:space="preserve">
    <value>Unexpected token parsing {0}. {1} is not supported.</value>
  </data>
  <data name="NotSupportedException_ConverterCanNotConvertFromString" xml:space="preserve">
    <value>Converter can not convert from System.String.</value>
  </data>
  <data name="NotSupportedException_NoGenericType" xml:space="preserve">
    <value>Type must be a none generic type.</value>
  </data>
  <data name="NotSupportedExceptionCountryToRegionInfo" xml:space="preserve">
    <value>The country '{0} ({1})' is not supported as region info.</value>
  </data>
  <data name="OverflowException_DateSpan" xml:space="preserve">
    <value>DateSpan overflowed because the resulting duration is too long.</value>
  </data>
  <data name="OverflowException_DecimalRound" xml:space="preserve">
    <value>Decimal overflowed while rounding.</value>
  </data>
  <data name="OverflowException_Fraction" xml:space="preserve">
    <value>Value was either too large or too small for a Fraction.</value>
  </data>
  <data name="FormatExceptionMonthSpan" xml:space="preserve">
    <value>Not a valid month span</value>
  </data>
  <data name="InvalidOperation_SequentialUUID" xml:space="preserve">
    <value>Sequential UUID can only be generated between 1970-01-01 and 9276-12-03.</value>
  </data>
  <data name="HashingNotSupported" xml:space="preserve">
    <value>Hashing is not supported by {0}.</value>
  </data>
  <data name="FormatExceptionSex" xml:space="preserve">
    <value>Not a valid sex</value>
  </data>
  <data name="FormatExceptionCasRegistryNumber" xml:space="preserve">
    <value>Not a valid CAS Registry Number</value>
  </data>
</root>