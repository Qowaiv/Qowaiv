namespace Qowaiv.Text;

internal static class ASCII
{
    [Pure]
    public static bool IsAscii(char c) => c < 127;

    [Pure]
    public static bool IsDigit(char c) => c >= '0' && c <= '9';

    [Pure]
    public static bool IsLetter(char c) => (Category[c] & Is.Letter) != 0;

    [Pure]
    public static bool IsLetterOrDigit(char c) => (Category[c] & Is.LetterOrDigit) != 0;

    [Pure]
    public static bool IsMarkup(char c) => (Category[c] & (Is.Markup | Is.Whitespace)) != 0;

    [Pure]
    public static char Upper(char c) => (Category[c] & Is.LowerCase) == 0 ? c : (char)(c & 0x5F);

    private static ReadOnlySpan<byte> Category =>
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00,
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x10,
        0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
        0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];

    private static class Is
    {
        public const byte Whitespace = /*.*/ 0b00001;
        public const byte Digit = /*......*/ 0b00010;
        public const byte UperCase = /*...*/ 0b00100;
        public const byte LowerCase = /*..*/ 0b01000;
        public const byte Markup = /*.....*/ 0b10000;
        public const byte Letter = UperCase | LowerCase;
        public const byte LetterOrDigit = Letter | Digit;
    }
}
