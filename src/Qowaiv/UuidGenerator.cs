using System;

namespace Qowaiv
{
    internal static class UuidGenerator
    {
        private const long TicksYear1970 = 0x89F_7FF5_F7B5_8000;

        /// <summary>Initializes a new  instance of a UUID that is sequential.</summary>
        /// <param name="comparer">
        /// The comparer that determines the order to put the generated bytes in.
        /// </param>
        /// <param name="prefilled">
        /// If the sequential UUID for a prefilled table/storage.
        /// </param>
        /// <remarks>
        /// * The first 7 bytes are based on ticks from <see cref="Clock.UtcNow()"/>.
        /// * The UUID's generated are sequential between 2000-01-01 and  9306-12-04.
        /// * Withing a timespan of 32 ticks (0.32 nanoseconds) there is a 25% change
        ///   that UUID's are not sequential.
        ///   
        /// For prefilled UUID's the first byte becomes 255, and the timespan becomes
        /// 8192 ticks (81.92 nanoseconds).
        /// </remarks>
        public static Uuid Sequential(UuidComparer comparer, bool prefilled)
        {
            var prioritizer = (comparer ?? UuidComparer.Default).Priority;
            var sequential = (Clock.UtcNow().Ticks - TicksYear1970) >> 5;
            var end = 0;

            // replace the version byte with a fully random one.
            var random = Guid.NewGuid().ToByteArray();
            random[Uuid.IndexOfVersion] = random[0];

            // If we generate a sequential for a prefilled:
            // * the sequential part is only 6 byte
            // * the first byte is 255
            if (prefilled)
            {
                sequential >>= 8;
                random[0] = byte.MaxValue;
                end++;
            }

            // set the sequential part.
            for (var i = 6; i >= end; i--)
            {
                random[i] = (byte)sequential;
                sequential >>= 8;
            }

            var bytes = new byte[Uuid.ArraySize];

            // setting the priority.
            for (var index = 0; index < Uuid.ArraySize; index++)
            {
                var prio = prioritizer[index];
                bytes[prio] = random[index];
            }

            // setting the version.
            UuidExtensions.SetVersion(bytes, UuidVersion.Sequential);

            return new Guid(bytes);
        }
    }
}
