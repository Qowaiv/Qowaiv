#pragma warning disable S2328
// "GetHashCode" should not reference mutable fields
// See README.md => Hashing

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using @(Model.Namespace).Conversion;
using Qowaiv.Formatting;
using Qowaiv.Json;

namespace @Model.Namespace
{
    /// <summary>Represents @Model.a @Model.ClassLongName.</summary>
    [DebuggerDisplay("{DebuggerDisplay}")]
    [Serializable, SingleValueObject(SingleValueStaticOptions.All, typeof(@Model.UnderlyingType.Name))]
    [OpenApiDataType(type: "string", format: "@Model.ClassName")]
    [TypeConverter(typeof(@(Model.ClassName)TypeConverter))]
    public struct @Model.ClassName : ISerializable, IXmlSerializable, IJsonSerializable, IFormattable, IEquatable<@Model.ClassName>, IComparable, IComparable<@Model.ClassName>
            {
            /// <summary>Represents the pattern of a (potential) valid @Model.ClassLongName.</summary>
            public static readonly Regex Pattern = new Regex(@@"^ComplexRegexPattern.*$", RegexOptions.Compiled);

            /// <summary>Represents an empty/not set @Model.ClassLongName.</summary>
            public static readonly @Model.ClassName Empty;

            /// <summary>Represents an unknown (but set) @Model.ClassLongName.</summary>
            public static readonly @Model.ClassName Unknown = new @(Model.ClassName) { m_Value = Unknown };

            #region Properties

            /// <summary>The inner value of the @Model.ClassLongName.</summary>
            private @Model.UnderlyingType.Name m_Value;
            @if (@Model.IsStringBased)
            {<text>
                    /// <summary>Gets the number of characters of @Model.ClassLongName.</summary>
                    public int Length => m_Value == null ? 0 : m_Value.Length;
            </text>}

            #endregion

            #region Methods

            /// <summary>Returns true if the @Model.ClassLongName is empty, otherwise false.</summary>
            public bool IsEmpty() => m_Value == default;

            /// <summary>Returns true if the @Model.ClassLongName is unknown, otherwise false.</summary>
            public bool IsUnknown() => m_Value == Unknown.m_Value;

            /// <summary>Returns true if the @Model.ClassLongName is empty or unknown, otherwise false.</summary>
            public bool IsEmptyOrUnknown() => IsEmpty() || IsUnknown();

            #endregion

            #region (XML) (De)serialization

            /// <summary>Initializes a new instance of @Model.ClassLongName based on the serialization info.</summary>
            /// <param name="info">The serialization info.</param>
            /// <param name="context">The streaming context.</param>
            private @(Model.ClassName)(SerializationInfo info, StreamingContext context)
            {
            Guard.NotNull(info, nameof(info));
            m_Value = info.Get@(Model.UnderlyingType.Name)("Value");
            }

            /// <summary>Adds the underlying property of @Model.ClassLongName to the serialization info.</summary>
            /// <param name="info">The serialization info.</param>
            /// <param name="context">The streaming context.</param>
            void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
            {
            Guard.NotNull(info, nameof(info));
            info.AddValue("Value", m_Value);
            }

            /// <summary>Gets the <see href="XmlSchema" /> to (de) XML serialize @Model.a @Model.ClassLongName.</summary>
            /// <remarks>
                /// Returns null as no schema is required.
                /// </remarks>
            XmlSchema IXmlSerializable.GetSchema() => null;

            /// <summary>Reads the @Model.ClassLongName from an <see href="XmlReader" />.</summary>
            /// <remarks>
                /// Uses the string parse function of @Model.ClassLongName.
                /// </remarks>
            /// <param name="reader">An XML reader.</param>
            void IXmlSerializable.ReadXml(XmlReader reader)
            {
            Guard.NotNull(reader, nameof(reader));
            var s = reader.ReadElementString();
            var val = Parse(s, CultureInfo.InvariantCulture);
            m_Value = val.m_Value;
            }

            /// <summary>Writes the @Model.ClassLongName to an <see href="XmlWriter" />.</summary>
            /// <remarks>
                /// Uses the string representation of @Model.ClassLongName.
                /// </remarks>
            /// <param name="writer">An XML writer.</param>
            void IXmlSerializable.WriteXml(XmlWriter writer)
            {
            Guard.NotNull(writer, nameof(writer));
            writer.WriteString(ToString(CultureInfo.InvariantCulture));
            }

            #endregion

            #region (JSON) (De)serialization

            /// <summary>Generates @Model.a @Model.ClassLongName from a JSON null object representation.</summary>
            void IJsonSerializable.FromJson() => m_Value = default;

            /// <summary>Generates @Model.a @Model.ClassLongName from a JSON string representation.</summary>
            /// <param name="jsonString">
            /// The JSON string that represents the @Model.ClassLongName.
            /// </param>
            void IJsonSerializable.FromJson(string jsonString) => m_Value = Parse(jsonString, CultureInfo.InvariantCulture).m_Value;

            /// <summary>Generates @Model.a @Model.ClassLongName from a JSON integer representation.</summary>
            /// <param name="jsonInteger">
            /// The JSON integer that represents the @Model.ClassLongName.
            /// </param>
            void IJsonSerializable.FromJson(Int64 jsonInteger) => throw new NotSupportedException(QowaivMessages.JsonSerialization_Int64NotSupported);
            // m_Value = Create(jsonInteger).m_Value;

            /// <summary>Generates @Model.a @Model.ClassLongName from a JSON number representation.</summary>
            /// <param name="jsonNumber">
            /// The JSON number that represents the @Model.ClassLongName.
            /// </param>
            void IJsonSerializable.FromJson(Double jsonNumber) => throw new NotSupportedException(QowaivMessages.JsonSerialization_DoubleNotSupported);
            // m_Value = Create(jsonNumber).m_Value;

            /// <summary>Generates @Model.a @Model.ClassLongName from a JSON date representation.</summary>
            /// <param name="jsonDate">
            /// The JSON Date that represents the @Model.ClassLongName.
            /// </param>
            void IJsonSerializable.FromJson(DateTime jsonDate) => throw new NotSupportedException(QowaivMessages.JsonSerialization_DateTimeNotSupported);
            // m_Value = Create(jsonDate).m_Value;

            /// <summary>Converts @Model.a @Model.ClassLongName into its JSON object representation.</summary>
            object IJsonSerializable.ToJson() => m_Value == default ? null : ToString(CultureInfo.InvariantCulture);

            #endregion

            #region IFormattable / ToString

            /// <summary>Returns a <see cref="string" /> that represents the current @Model.ClassLongName for debug purposes.</summary>
            [DebuggerBrowsable(DebuggerBrowsableState.Never), SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Called by Debugger.")]
            private string DebuggerDisplay
            {
            get
            {
            if (IsEmpty())
            {
            return "@(Model.ClassName): (empty)";
            }
            if (IsUnknown())
            {
            return "@(Model.ClassName): (unknown)";
            }
            return string.Format(CultureInfo.InvariantCulture, "@(Model.ClassName): {0}", m_Value);
            }
            }

            /// <summary>Returns a <see cref="string" /> that represents the current @Model.ClassLongName.</summary>
            public override string ToString() => ToString(CultureInfo.CurrentCulture);

            /// <summary>Returns a formatted <see cref="string" /> that represents the current @Model.ClassLongName.</summary>
            /// <param name="format">
            /// The format that this describes the formatting.
            /// </param>
            public string ToString(string format) => ToString(format, CultureInfo.CurrentCulture);

            /// <summary>Returns a formatted <see cref="string" /> that represents the current @Model.ClassLongName.</summary>
            /// <param name="formatProvider">
            /// The format provider.
            /// </param>
            public string ToString(IFormatProvider formatProvider) => ToString("", formatProvider);

            /// <summary>Returns a formatted <see cref="string" /> that represents the current @Model.ClassLongName.</summary>
            /// <param name="format">
            /// The format that this describes the formatting.
            /// </param>
            /// <param name="formatProvider">
            /// The format provider.
            /// </param>
            public string ToString(string format, IFormatProvider formatProvider)
            {
            if (StringFormatter.TryApplyCustomFormatter(format, this, formatProvider, out string formatted))
            {
            return formatted;
            }
            throw new NotImplementedException();
            }

            #endregion

            #region IEquatable

            /// <summary>Returns true if this instance and the other object are equal, otherwise false.</summary>
            /// <param name="obj">An object to compare with.</param>
            public override bool Equals(object obj) => obj is @Model.ClassName && Equals((@Model.ClassName)obj);

            /// <summary>Returns true if this instance and the other <see cref="@Model.ClassName" /> are equal, otherwise false.</summary>
            /// <param name="other">The <see cref="@Model.ClassName" /> to compare with.</param>
            public bool Equals(@Model.ClassName other) => m_Value == other.m_Value;

            /// <summary>Returns the hash code for this @Model.ClassLongName.</summary>
            /// <returns>
                /// A 32-bit signed integer hash code.
                /// </returns>
            public override int GetHashCode() => @if (Model.UnderlyingType == typeof(string))
            {<text>m_Value == null ? 0 : </text>}m_Value.GetHashCode();

            /// <summary>Returns true if the left and right operand are not equal, otherwise false.</summary>
            /// <param name="left">The left operand.</param>
            /// <param name="right">The right operand</param>
            public static bool operator ==(@Model.ClassName left, @Model.ClassName right) => left.Equals(right);

            /// <summary>Returns true if the left and right operand are equal, otherwise false.</summary>
            /// <param name="left">The left operand.</param>
            /// <param name="right">The right operand</param>
            public static bool operator !=(@Model.ClassName left, @Model.ClassName right) => !(left == right);

            #endregion

            #region IComparable

            /// <summary>Compares this instance with a specified System.Object and indicates whether
                /// this instance precedes, follows, or appears in the same position in the sort
                /// order as the specified System.Object.
                /// </summary>
            /// <param name="obj">
            /// An object that evaluates to a @Model.ClassLongName.
            /// </param>
            /// <returns>
                /// A 32-bit signed integer that indicates whether this instance precedes, follows,
                /// or appears in the same position in the sort order as the value parameter.Value
                /// Condition Less than zero This instance precedes value. Zero This instance
                /// has the same position in the sort order as value. Greater than zero This
                /// instance follows value.-or- value is null.
                /// </returns>
            /// <exception cref="ArgumentException">
                /// value is not a @Model.ClassLongName.
                /// </exception>
            public int CompareTo(object obj)
            {
            if (obj is @Model.ClassName)
            {
            return CompareTo((@Model.ClassName)obj);
            }
            throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, QowaivMessages.ArgumentException_Must, "@Model.a @Model.ClassLongName"), "obj");
            }

            /// <summary>Compares this instance with a specified @Model.ClassLongName and indicates
                /// whether this instance precedes, follows, or appears in the same position
                /// in the sort order as the specified @Model.ClassLongName.
                /// </summary>
            /// <param name="other">
            /// The @Model.ClassLongName to compare with this instance.
            /// </param>
            /// <returns>
            /// A 32-bit signed integer that indicates whether this instance precedes, follows,
            /// or appears in the same position in the sort order as the value parameter.
            /// </returns>
            public int CompareTo(@Model.ClassName other) => m_Value.CompareTo(other.m_Value);

            @if (!Model.IsStringBased)
            {<text>
            /// <summary>Returns true if the left operator is less then the right operator, otherwise false.</summary>
            public static bool operator @(Model.lt)(@(Model.ClassName) l, @(Model.ClassName) r) => l.CompareTo(r) @(Model.lt) 0;

            /// <summary>Returns true if the left operator is greater then the right operator, otherwise false.</summary>
            public static bool operator @(Model.gt)(@(Model.ClassName) l, @(Model.ClassName) r) => l.CompareTo(r) @(Model.gt) 0;

            /// <summary>Returns true if the left operator is less then or equal the right operator, otherwise false.</summary>
            public static bool operator @(Model.lt)=(@(Model.ClassName) l, @(Model.ClassName) r) => l.CompareTo(r) @(Model.lt)= 0;

            /// <summary>Returns true if the left operator is greater then or equal the right operator, otherwise false.</summary>
            public static bool operator @(Model.gt)=(@(Model.ClassName) l, @(Model.ClassName) r) => l.CompareTo(r) @(Model.gt)= 0;

            </text>}
            #endregion

            #region (Explicit) casting

            /// <summary>Casts @Model.a @Model.ClassLongName to a <see cref="string" />.</summary>
            public static explicit operator string(@Model.ClassName val) => val.ToString(CultureInfo.CurrentCulture);
            /// <summary>Casts a <see cref="string" /> to a @Model.ClassLongName.</summary>
            public static explicit operator @(Model.ClassName)(string str) => @(Model.ClassName).Parse(str, CultureInfo.CurrentCulture);

            @if (Model.IsFloatBased)
            {<text>
            /// <summary>Casts a decimal @Model.a @Model.ClassLongName.</summary>
            public static implicit operator @(Model.ClassName)(decimal val) => new @(Model.ClassName) { m_Value = val };
            /// <summary>Casts a decimal @Model.a @Model.ClassLongName.</summary>
            public static implicit operator @(Model.ClassName)(double val) => new @(Model.ClassName) { m_Value = (decimal)val };

            /// <summary>Casts @Model.a @Model.ClassLongName to a decimal.</summary>
            public static explicit operator decimal(@Model.ClassName val) => val.m_Value;
            /// <summary>Casts @Model.a @Model.ClassLongName to a double.</summary>
            public static explicit operator double(@Model.ClassName val) => (double)val.m_Value;
            </text>}

            @if (Model.IsIntegerBased)
            {<text>
            /// <summary>Casts @Model.a @Model.ClassLongName to a System.Int32.</summary>
            public static explicit operator Int32(@(Model.ClassName) val) => val.m_Value;
            /// <summary>Casts an System.Int32 to @Model.a @Model.ClassLongName.</summary>
            public static explicit operator @(Model.ClassName)(Int32 val) => @(Model.ClassName).Create(val);

            /// <summary>Casts @Model.a @Model.ClassLongName to a System.Int64.</summary>
            public static explicit operator Int64(@(Model.ClassName) val) => val.m_Value;
            /// <summary>Casts a System.Int64 to @Model.a @Model.ClassLongName.</summary>
            public static explicit operator @(Model.ClassName)(Int64 val) => @(Model.ClassName).Create((Int32)val);
            </text>}
            #endregion

            #region Factory methods

            /// <summary>Converts the string to @Model.a @Model.ClassLongName.</summary>
            /// <param name="s">
            /// A string containing @Model.a @Model.ClassLongName to convert.
            /// </param>
            /// <returns>
            /// @Model.aUpper @Model.ClassLongName.
            /// </returns>
            /// <exception cref="FormatException">
            /// s is not in the correct format.
            /// </exception>
            public static @Model.ClassName Parse(string s) => Parse(s, CultureInfo.CurrentCulture);

            /// <summary>Converts the string to @Model.a @Model.ClassLongName.</summary>
            /// <param name="s">
            /// A string containing @Model.a @Model.ClassLongName to convert.
            /// </param>
            /// <param name="formatProvider">
            /// The specified format provider.
            /// </param>
            /// <returns>
            /// @Model.aUpper @Model.ClassLongName.
            /// </returns>
            /// <exception cref="FormatException">
            /// s is not in the correct format.
            /// </exception>
            public static @Model.ClassName Parse(string s, IFormatProvider formatProvider)
            {
            if (TryParse(s, formatProvider, out @Model.ClassName val))
            {
            return val;
            }
            throw new FormatException(QowaivMessages.FormatException@(Model.ClassName));
            }

            /// <summary>Converts the string to @Model.a @Model.ClassLongName.
            /// A return value indicates whether the conversion succeeded.
            /// </summary>
            /// <param name="s">
            /// A string containing @Model.a @Model.ClassLongName to convert.
            /// </param>
            /// <returns>
            /// The @Model.ClassLongName if the string was converted successfully, otherwise Empty.
            /// </returns>
            public static @Model.ClassName TryParse(string s)
            {
            if (TryParse(s, out @Model.ClassName val))
            {
            return val;
            }
            return Empty;
            }

            /// <summary>Converts the string to @Model.a @Model.ClassLongName.
            /// A return value indicates whether the conversion succeeded.
            /// </summary>
            /// <param name="s">
            /// A string containing @Model.a @Model.ClassLongName to convert.
            /// </param>
            /// <param name="result">
            /// The result of the parsing.
            /// </param>
            /// <returns>
            /// True if the string was converted successfully, otherwise false.
            /// </returns>
            public static bool TryParse(string s, out @Model.ClassName result) => TryParse(s, CultureInfo.CurrentCulture, out result);

            /// <summary>Converts the string to @Model.a @Model.ClassLongName.
            /// A return value indicates whether the conversion succeeded.
            /// </summary>
            /// <param name="s">
            /// A string containing @Model.a @Model.ClassLongName to convert.
            /// </param>
            /// <param name="formatProvider">
            /// The specified format provider.
            /// </param>
            /// <param name="result">
            /// The result of the parsing.
            /// </param>
            /// <returns>
            /// True if the string was converted successfully, otherwise false.
            /// </returns>
            public static bool TryParse(string s, IFormatProvider formatProvider, out @Model.ClassName result)
            {
            result = Empty;
            if (string.IsNullOrEmpty(s))
            {
            return true;
            }
            var culture = formatProvider as CultureInfo ?? CultureInfo.InvariantCulture;
            if (Qowaiv.Unknown.IsUnknown(s, culture))
            {
            result = Unknown;
            return true;
            }
            if (IsValid(s, culture))
            {
            result = new @(Model.ClassName) { m_Value = @(Model.UnderlyingType).Parse(s, formatProvider) };
            return true;
            }
            return false;
            }

            @if (!Model.IsStringBased)
            {<text>

                /// @(Model.lt)summary @(Model.gt)Creates @Model.a @Model.ClassLongName from a @Model.UnderlyingType.Name. @(Model.lt)/summary @(Model.gt)
                /// @(Model.lt)param name="val" @(Model.gt)
                /// A decimal describing @Model.a @Model.ClassLongName.
                /// @(Model.lt)/param @(Model.gt)
                /// @(Model.lt)exception cref="System.FormatException" @(Model.gt)
                /// val is not a valid @Model.ClassLongName.
                /// @(Model.lt)/exception @(Model.gt)
                    public static @(Model.ClassName) Create(@Model.UnderlyingType.Name? val)
                    {
                    if (TryCreate(val, out @(Model.ClassName) result))
                    {
                    return result;
                    }
                    throw new ArgumentOutOfRangeException("val", QowaivMessages.FormatException@(Model.ClassName));
                    }

                    /// @(Model.lt)summary @(Model.gt)Creates @Model.a @Model.ClassLongName from a @Model.UnderlyingType.Name.
                    /// A return value indicates whether the conversion succeeded.
                    /// @(Model.lt)/summary @(Model.gt)
                    /// @(Model.lt)param name="val" @(Model.gt)
                    /// A decimal describing @Model.a @Model.ClassLongName.
                    /// @(Model.lt)/param @(Model.gt)
                    /// @(Model.lt)returns @(Model.gt)
                    /// @Model.aUpper @Model.ClassLongName if the creation was successfully, otherwise Empty.
                    /// @(Model.lt)/returns @(Model.gt)
                    public static @(Model.ClassName) TryCreate(@Model.UnderlyingType.Name? val)
                    {
                    if(TryCreate(val, out @(Model.ClassName) result))
                    {
                    return result;
                    }
                    return Empty;
                    }

                    /// @(Model.lt)summary @(Model.gt)Creates @Model.a @Model.ClassLongName from a @Model.UnderlyingType.Name.
                    /// A return value indicates whether the creation succeeded.
                    /// @(Model.lt)/summary @(Model.gt)
                    /// @(Model.lt)param name="val" @(Model.gt)
                    /// A @Model.UnderlyingType.Name describing @Model.a @Model.ClassLongName.
                    /// @(Model.lt)/param @(Model.gt)
                    /// @(Model.lt)param name="result" @(Model.gt)
                    /// The result of the creation.
                    /// @(Model.lt)/param @(Model.gt)
                    /// @(Model.lt)returns @(Model.gt)
                    /// True if @Model.a @Model.ClassLongName was created successfully, otherwise false.
                    /// @(Model.lt)/returns @(Model.gt)
                    public static bool TryCreate(@Model.UnderlyingType.Name? val, out @(Model.ClassName) result)
                    {
                    result = Empty;

                    if (!val.HasValue)
                    {
                    return true;
                    }
                    if (IsValid(val.Value))
                    {
                    result = new @(Model.ClassName) { m_Value = val.Value };
                    return true;
                    }
                    return false;
                    }
            </text>}

            #endregion

            #region Validation

            /// <summary>Returns true if the val represents a valid @Model.ClassLongName, otherwise false.</summary>
            public static bool IsValid(string val) => IsValid(val, CultureInfo.CurrentCulture);

            /// <summary>Returns true if the val represents a valid @Model.ClassLongName, otherwise false.</summary>
            public static bool IsValid(string val, IFormatProvider formatProvider)
            {
            return Pattern.IsMatch(val ?? string.Empty);
            }
            @if (!Model.IsStringBased)
            {<text>
            /// <summary>Returns true if the val represents a valid @Model.ClassLongName, otherwise false.</summary>
            public static bool IsValid(@Model.UnderlyingType.Name? val)
            {
                if (!val.HasValue)
                {
                    return false;
                }
                throw new NotImplementedException();
            }
            </text>}
            #endregion
    }
}
