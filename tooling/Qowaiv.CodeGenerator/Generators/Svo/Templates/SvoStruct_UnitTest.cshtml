using NUnit.Framework;
using Qowaiv.Globalization;
using Qowaiv.TestTools;
using Qowaiv.TestTools.Formatting;
using Qowaiv.UnitTests.Json;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Threading;
using System.Xml.Serialization;
using @Model.Namespace;

namespace @(Model.Namespace).UnitTests
{
    /// <summary>Tests the @Model.ClassLongName SVO.</summary>
    public class @Model.ClassNameTest
    {
    /// <summary>The test instance for most tests.</summary>
    public static readonly @Model.ClassName TestStruct = @(Model.ClassName).Parse("ComplexRegexPattern");

    #region @Model.ClassLongName const tests

    /// <summary>@(Model.ClassName).Empty should be equal to the default of @Model.ClassLongName.</summary>
    [Test]
    public void Empty_None_EqualsDefault()
    {
    Assert.AreEqual(default(@(Model.ClassName)), @(Model.ClassName).Empty);
    }

    #endregion

    #region @Model.ClassLongName IsEmpty tests

    /// <summary>@(Model.ClassName).IsEmpty() should be true for the default of @Model.ClassLongName.</summary>
    [Test]
    public void IsEmpty_Default_IsTrue()
    {
    Assert.IsTrue(default(@(Model.ClassName)).IsEmpty());
    }
    /// <summary>@(Model.ClassName).IsEmpty() should be false for @(Model.ClassName).Unknown.</summary>
    [Test]
    public void IsEmpty_Unknown_IsFalse()
    {
    Assert.IsFalse(@(Model.ClassName).Unknown.IsEmpty());
    }
    /// <summary>@(Model.ClassName).IsEmpty() should be false for the TestStruct.</summary>
    [Test]
    public void IsEmpty_TestStruct_IsFalse()
    {
    Assert.IsFalse(TestStruct.IsEmpty());
    }

    /// <summary>@(Model.ClassName).IsUnknown() should be false for the default of @Model.ClassLongName.</summary>
    [Test]
    public void IsUnknown_Default_IsFalse()
    {
    Assert.IsFalse(default(@(Model.ClassName)).IsUnknown());
    }
    /// <summary>@(Model.ClassName).IsUnknown() should be true for @(Model.ClassName).Unknown.</summary>
    [Test]
    public void IsUnknown_Unknown_IsTrue()
    {
    Assert.IsTrue(@(Model.ClassName).Unknown.IsUnknown());
    }
    /// <summary>@(Model.ClassName).IsUnknown() should be false for the TestStruct.</summary>
    [Test]
    public void IsUnknown_TestStruct_IsFalse()
    {
    Assert.IsFalse(TestStruct.IsUnknown());
    }

    /// <summary>@(Model.ClassName).IsEmptyOrUnknown() should be true for the default of @Model.ClassLongName.</summary>
    [Test]
    public void IsEmptyOrUnknown_Default_IsFalse()
    {
    Assert.IsTrue(default(@(Model.ClassName)).IsEmptyOrUnknown());
    }
    /// <summary>@(Model.ClassName).IsEmptyOrUnknown() should be true for @(Model.ClassName).Unknown.</summary>
    [Test]
    public void IsEmptyOrUnknown_Unknown_IsTrue()
    {
    Assert.IsTrue(@(Model.ClassName).Unknown.IsEmptyOrUnknown());
    }
    /// <summary>@(Model.ClassName).IsEmptyOrUnknown() should be false for the TestStruct.</summary>
    [Test]
    public void IsEmptyOrUnknown_TestStruct_IsFalse()
    {
    Assert.IsFalse(TestStruct.IsEmptyOrUnknown());
    }

    #endregion

    #region TryParse tests

    /// <summary>TryParse null should be valid.</summary>
    [Test]
    public void TyrParse_Null_IsValid()
    {
    @Model.ClassName val;

    string str = null;

    Assert.IsTrue(@(Model.ClassName).TryParse(str, out val), "Valid");
    Assert.AreEqual(string.Empty, val.ToString(), "Value");
    }

    /// <summary>TryParse string.Empty should be valid.</summary>
    [Test]
    public void TyrParse_StringEmpty_IsValid()
    {
    @Model.ClassName val;

    string str = string.Empty;

    Assert.IsTrue(@(Model.ClassName).TryParse(str, out val), "Valid");
    Assert.AreEqual(string.Empty, val.ToString(), "Value");
    }

    /// <summary>TryParse "?" should be valid and the result should be @(Model.ClassName).Unknown.</summary>
    [Test]
    public void TyrParse_Questionmark_IsValid()
    {
    @Model.ClassName val;

    string str = "?";

    Assert.IsTrue(@(Model.ClassName).TryParse(str, out val), "Valid");
    Assert.IsTrue(val.IsUnknown(), "Value");
    }

    /// <summary>TryParse with specified string value should be valid.</summary>
    [Test]
    public void TyrParse_StringValue_IsValid()
    {
    @Model.ClassName val;

    string str = "string";

    Assert.IsTrue(@(Model.ClassName).TryParse(str, out val), "Valid");
    Assert.AreEqual(str, val.ToString(), "Value");
    }

    /// <summary>TryParse with specified string value should be invalid.</summary>
    [Test]
    public void TyrParse_StringValue_IsNotValid()
    {
    @Model.ClassName val;

    string str = "string";

    Assert.IsFalse(@(Model.ClassName).TryParse(str, out val), "Valid");
    Assert.AreEqual(string.Empty, val.ToString(), "Value");
    }

    [Test]
    public void Parse_Unknown_AreEqual()
    {
    using (new CultureInfoScope("en-GB"))
    {
    var act = @(Model.ClassName).Parse("?");
    var exp = @(Model.ClassName).Unknown;
    Assert.AreEqual(exp, act);
    }
    }

    [Test]
    public void Parse_InvalidInput_ThrowsFormatException()
    {
    using (new CultureInfoScope("en-GB"))
    {
    Assert.Catch<FormatException>
    (() =>
    {
    @(Model.ClassName).Parse("InvalidInput");
    },
    "Not a valid @(Model.ClassLongName)");
    }
    }

    [Test]
    public void TryParse_TestStructInput_AreEqual()
    {
    using (new CultureInfoScope("en-GB"))
    {
    var exp = TestStruct;
    var act = @(Model.ClassName).TryParse(exp.ToString());

    Assert.AreEqual(exp, act);
    }
    }

    [Test]
    public void TryParse_InvalidInput_DefaultValue()
    {
    using (new CultureInfoScope("en-GB"))
    {
    var exp = default(@(Model.ClassName));
    var act = @(Model.ClassName).TryParse("InvalidInput");

    Assert.AreEqual(exp, act);
    }
    }

    #endregion

    @if (Model.UnderlyingType != typeof(string))
    {<text>
    #region TryCreate tests

    [Test]
    public void TryCreate_Null_IsEmpty()
    {
    @(Model.ClassName) exp = @(Model.ClassName).Empty;
    @(Model.ClassName) act;

    Assert.IsTrue(@(Model.ClassName).TryCreate(null, out act));
    Assert.AreEqual(exp, act);
    }
    [Test]
    public void TryCreate_@(Model.UnderlyingType.Name)MinValue_IsEmpty()
    {
    @(Model.ClassName) exp = @(Model.ClassName).Empty;
    @(Model.ClassName) act;

    Assert.IsFalse(@(Model.ClassName).TryCreate(@(Model.UnderlyingType.Name).MinValue, out act));
    Assert.AreEqual(exp, act);
    }

    [Test]
    public void TryCreate_@(Model.UnderlyingType.Name)MinValue_AreEqual()
    {
    var exp = @(Model.ClassName).Empty;
    var act = @(Model.ClassName).TryCreate(@(Model.UnderlyingType.Name).MinValue);
    Assert.AreEqual(exp, act);
    }
    [Test]
    public void TryCreate_Value_AreEqual()
    {
    var exp = TestStruct;
    var act = @(Model.ClassName).TryCreate(1234567);
    Assert.AreEqual(exp, act);
    }

    [Test]
    public void Create_@(Model.UnderlyingType.Name)MinValue_ThrowsArgumentOutOfRangeException()
    {
    ExceptionAssert.CatchArgumentOutOfRangeException
    (() =>
    {
    @(Model.ClassName).Create(@(Model.UnderlyingType.Name).MinValue);
    },
    "val",
    "Not a valid @(Model.ClassLongName)");
    }

    #endregion
    </text>}

    #region (XML) (De)serialization tests

    [Test]
    public void Constructor_SerializationInfoIsNull_ThrowsArgumentNullException()
    {
    ExceptionAssert.CatchArgumentNullException
    (() =>
    {
    SerializationTest.DeserializeUsingConstructor<@(Model.ClassName)>
    (null, default(StreamingContext));
    },
    "info");
    }

    [Test]
    public void Constructor_InvalidSerializationInfo_ThrowsSerializationException()
    {
    Assert.Catch<SerializationException>
    (() =>
    {
    var info = new SerializationInfo(typeof(@(Model.ClassName)), new System.Runtime.Serialization.FormatterConverter());
    SerializationTest.DeserializeUsingConstructor<@(Model.ClassName)>
    (info, default(StreamingContext));
    });
    }

    [Test]
    public void GetObjectData_Null_ThrowsArgumentNullException()
    {
    ExceptionAssert.CatchArgumentNullException
    (() =>
    {
    ISerializable obj = TestStruct;
    obj.GetObjectData(null, default(StreamingContext));
    },
    "info");
    }

    [Test]
    public void GetObjectData_SerializationInfo_AreEqual()
    {
    ISerializable obj = TestStruct;
    var info = new SerializationInfo(typeof(@(Model.ClassName)), new System.Runtime.Serialization.FormatterConverter());
    obj.GetObjectData(info, default(StreamingContext));

    Assert.AreEqual((@(Model.UnderlyingType.Name))2, info.Get@(Model.UnderlyingType.Name)("Value"));
    }

    [Test]
    public void SerializeDeserialize_TestStruct_AreEqual()
    {
    var input = TestStruct;
    var exp = TestStruct;
    var act = SerializationTest.SerializeDeserialize(input);
    Assert.AreEqual(exp, act);
    }
    [Test]
    public void DataContractSerializeDeserialize_TestStruct_AreEqual()
    {
    var input = TestStruct;
    var exp = TestStruct;
    var act = SerializationTest.DataContractSerializeDeserialize(input);
    Assert.AreEqual(exp, act);
    }
    
        [Test]
        public void XmlSerialize_TestStruct_AreEqual()
        {
            var act = SerializationTest.XmlSerialize(TestStruct);
            var exp = "xmlstring";
            Assert.AreEqual(exp, act);
        }

        [Test]
        public void XmlDeserialize_XmlString_AreEqual()
        {
            var act = SerializationTest.XmlDeserialize<Model.ClassNameSerializeObject>("xmlstring");
            Assert.AreEqual(TestStruct, act);
        }

    [Test]
    public void SerializeDeserialize_@(Model.ClassNameSerializeObject)_AreEqual()
    {
    var input = new @(Model.ClassNameSerializeObject)()
    {
    Id = 17,
    Obj = TestStruct,
    Date = new DateTime(1970, 02, 14),
    };
    var exp = new @(Model.ClassNameSerializeObject)()
    {
    Id = 17,
    Obj = TestStruct,
    Date = new DateTime(1970, 02, 14),
    };
    var act = SerializationTest.SerializeDeserialize(input);
    Assert.AreEqual(exp.Id, act.Id, "Id");
    Assert.AreEqual(exp.Obj, act.Obj, "Obj");
    Assert.AreEqual(exp.Date, act.Date, "Date");;
    }
    [Test]
    public void XmlSerializeDeserialize_@(Model.ClassNameSerializeObject)_AreEqual()
    {
    var input = new @(Model.ClassNameSerializeObject)()
    {
    Id = 17,
    Obj = TestStruct,
    Date = new DateTime(1970, 02, 14),
    };
    var exp = new @(Model.ClassNameSerializeObject)()
    {
    Id = 17,
    Obj = TestStruct,
    Date = new DateTime(1970, 02, 14),
    };
    var act = SerializationTest.XmlSerializeDeserialize(input);
    Assert.AreEqual(exp.Id, act.Id, "Id");
    Assert.AreEqual(exp.Obj, act.Obj, "Obj");
    Assert.AreEqual(exp.Date, act.Date, "Date");;
    }
    [Test]
    public void DataContractSerializeDeserialize_@(Model.ClassNameSerializeObject)_AreEqual()
    {
    var input = new @(Model.ClassNameSerializeObject)()
    {
    Id = 17,
    Obj = TestStruct,
    Date = new DateTime(1970, 02, 14),
    };
    var exp = new @(Model.ClassNameSerializeObject)()
    {
    Id = 17,
    Obj = TestStruct,
    Date = new DateTime(1970, 02, 14),
    };
    var act = SerializationTest.DataContractSerializeDeserialize(input);
    Assert.AreEqual(exp.Id, act.Id, "Id");
    Assert.AreEqual(exp.Obj, act.Obj, "Obj");
    Assert.AreEqual(exp.Date, act.Date, "Date");;
    }

    [Test]
    public void SerializeDeserialize_Default_AreEqual()
    {
		var input = new @(Model.ClassNameSerializeObject)()
		{
			Id = 17,
			Obj = default(@(Model.ClassName)),
			Date = new DateTime(1970, 02, 14),
		};
		var exp = new @(Model.ClassNameSerializeObject)()
		{
			Id = 17,
			Obj = default(@(Model.ClassName)),
			Date = new DateTime(1970, 02, 14),
		};
		var act = SerializationTest.SerializeDeserialize(input);
		Assert.AreEqual(exp.Id, act.Id, "Id");
		Assert.AreEqual(exp.Obj, act.Obj, "Obj");
		Assert.AreEqual(exp.Date, act.Date, "Date");
    }
    [Test]
    public void XmlSerializeDeserialize_Default_AreEqual()
    {
		var input = new  @(Model.ClassNameSerializeObject)()
		{
			Id = 17,
			Obj = default(@(Model.ClassName)),
			Date = new DateTime(1970, 02, 14),
		};
		var exp = new @(Model.ClassNameSerializeObject)()
		{
			Id = 17,
			Obj = default(@(Model.ClassName)),
			Date = new DateTime(1970, 02, 14),
		};
		var act = SerializationTest.XmlSerializeDeserialize(input);
		Assert.AreEqual(exp.Id, act.Id, "Id");
		Assert.AreEqual(exp.Obj, act.Obj, "Obj");
		Assert.AreEqual(exp.Date, act.Date, "Date");
    }

    [Test]
    public void GetSchema_None_IsNull()
    {
    IXmlSerializable obj = TestStruct;
    Assert.IsNull(obj.GetSchema());
    }

    #endregion

    #region JSON (De)serialization tests

    [Test]
    public void FromJson_None_EmptyValue()
    {
    var act = JsonTester.Read<@(Model.ClassName)>
    ();
    var exp = @(Model.ClassName).Empty;

    Assert.AreEqual(exp, act);
    }
    [Test]
    public void FromJson_Null_AssertNotSupportedException()
    {
    Assert.Catch<NotSupportedException>
    (() =>
    {
    JsonTester.Read<@(Model.ClassName)>
    ();
    },
    "JSON deserialization from null is not supported.");
    }

    [Test]
    public void FromJson_InvalidStringValue_AssertFormatException()
    {
    Assert.Catch<FormatException>
    (() =>
    {
    JsonTester.Read<@(Model.ClassName)>
    ("InvalidStringValue");
    },
    "Not a valid @Model.ClassLongName");
    }
    [Test]
    public void FromJson_StringValue_AreEqual()
    {
        var act = JsonTester.Read<@(Model.ClassName)>("JsonRepresentationString");
        Assert.AreEqual(TestStruct, act);
    }

    [Test]
    public void FromJson_Int64Value_AreEqual()
    {
        var act = JsonTester.Read<@(Model.ClassName)>(123456789L);
        Assert.AreEqual(TestStruct, act);
    }
    [Test]
    public void FromJson_Int64Value_AssertNotSupportedException()
    {
    Assert.Catch<NotSupportedException>
    (() =>
    {
    JsonTester.Read<@(Model.ClassName)>
    (123456L);
    },
    "JSON deserialization from an integer is not supported.");
    }

    [Test]
    public void FromJson_DoubleValue_AreEqual()
    {
    var act = JsonTester.Read<@(Model.ClassName)>
    ((Double)TestStruct);
    var exp = TestStruct;

    Assert.AreEqual(exp, act);
    }
    [Test]
    public void FromJson_DoubleValue_AssertNotSupportedException()
    {
    Assert.Catch<NotSupportedException>
    (() =>
    {
    JsonTester.Read<@(Model.ClassName)>
    (1234.56);
    },
    "JSON deserialization from a number is not supported.");
    }

    [Test]
    public void FromJson_DateTimeValue_AreEqual()
    {
    var act = JsonTester.Read<@(Model.ClassName)>
    ((DateTime)TestStruct);
    var exp = TestStruct;

    Assert.AreEqual(exp, act);
    }
    [Test]
    public void FromJson_DateTimeValue_AssertNotSupportedException()
    {
    Assert.Catch<NotSupportedException>
    (() =>
    {
    JsonTester.Read<@(Model.ClassName)>
    (new DateTime(1972, 02, 14));
    },
    "JSON deserialization from a date is not supported.");
    }

    [Test]
    public void ToJson_DefaultValue_IsNull()
    {
        object act = JsonTester.Write(default(@Model.ClassName));
        Assert.IsNull(act);
    }
    [Test]
    public void ToJson_TestStruct_AreEqual()
    {
        var act = JsonTester.Write(TestStruct);
        var exp = "Some JSON string";
        Assert.AreEqual(exp, act);
    }

    #endregion

    #region IFormattable / Tostring tests

    [Test]
    public void ToString_Empty_StringEmpty()
    {
    var act = @(Model.ClassName).Empty.ToString();
    var exp = "";
    Assert.AreEqual(exp, act);
    }

    [Test]
    public void ToString_Unknown_QuestionMark()
    {
    var act = @(Model.ClassName).Unknown.ToString();
    var exp = "?";
    Assert.AreEqual(exp, act);
    }

    [Test]
    public void ToString_CustomFormatter_SupportsCustomFormatting()
    {
    var act = TestStruct.ToString("Unit Test Format", new UnitTestFormatProvider());
    var exp = "Unit Test Formatter, value: 'Some Formatted Value', format: 'Unit Test Format'";

    Assert.AreEqual(exp, act);
    }
    [TestCase("en-US", "", "ComplexPattern", "ComplexPattern")]
    [TestCase("nl-BE", null, "1600,1", "1600,1")]
    [TestCase("en-GB", null, "1600.1", "1600.1")]
    [TestCase("nl-BE", "0000", "800", "0800")]
    [TestCase("en-GB", "0000", "800", "0800")]
    public void ToString_UsingCultureWithPattern(string culture, string format, string str, string expected)
    {
    using (new CultureInfoScope(culture))
    {
    var actual = @(Model.ClassName).Parse(str).ToString(format);
    Assert.AreEqual(expected, actual);
    }
    }

    [Test]
    public void ToString_FormatValueSpanishEcuador_AreEqual()
    {
    var act = @(Model.ClassName).Parse("1700").ToString("00000.0", new CultureInfo("es-EC"));
    var exp = "01700,0";
    Assert.AreEqual(exp, act);
    }

    [Test]
    public void DebuggerDisplay_DebugToString_HasAttribute()
    {
    DebuggerDisplayAssert.HasAttribute(typeof(@(Model.ClassName)));
    }

    [Test]
    public void DebuggerDisplay_DefaultValue_String()
    {
    DebuggerDisplayAssert.HasResult("ComplexPattern", default(@(Model.ClassName)));
    }
    [Test]
    public void DebuggerDisplay_Unknown_String()
    {
    DebuggerDisplayAssert.HasResult("ComplexPattern", @(Model.ClassName).Unknown);
    }

    [Test]
    public void DebuggerDisplay_TestStruct_String()
    {
    DebuggerDisplayAssert.HasResult("ComplexPattern", TestStruct);
    }

    #endregion

    #region IEquatable tests

    /// <summary>GetHash should not fail for @(Model.ClassName).Empty.</summary>
    [Test]
    public void GetHash_Empty_Hash()
    {
    Assert.AreEqual(-1, @(Model.ClassName).Empty.GetHashCode());
    }

    /// <summary>GetHash should not fail for the test struct.</summary>
    [Test]
    public void GetHash_TestStruct_Hash()
    {
    Assert.AreEqual(-1, TestStruct.GetHashCode());
    }

    [Test]
    public void Equals_EmptyEmpty_IsTrue()
    {
    Assert.IsTrue(@(Model.ClassName).Empty.Equals(@(Model.ClassName).Empty));
    }

    [Test]
    public void Equals_FormattedAndUnformatted_IsTrue()
    {
    var l = @(Model.ClassName).Parse("formatted", CultureInfo.InvariantCulture);
    var r = @(Model.ClassName).Parse("unformatted", CultureInfo.InvariantCulture);

    Assert.IsTrue(l.Equals(r));
    }

    [Test]
    public void Equals_TestStructTestStruct_IsTrue()
    {
    Assert.IsTrue(TestStruct.Equals(TestStruct));
    }

    [Test]
    public void Equals_TestStructEmpty_IsFalse()
    {
    Assert.IsFalse(TestStruct.Equals(@(Model.ClassName).Empty));
    }

    [Test]
    public void Equals_EmptyTestStruct_IsFalse()
    {
    Assert.IsFalse(@(Model.ClassName).Empty.Equals(TestStruct));
    }

    [Test]
    public void Equals_TestStructObjectTestStruct_IsTrue()
    {
    Assert.IsTrue(TestStruct.Equals((object)TestStruct));
    }

    [Test]
    public void Equals_TestStructNull_IsFalse()
    {
    Assert.IsFalse(TestStruct.Equals(null));
    }

    [Test]
    public void Equals_TestStructObject_IsFalse()
    {
    Assert.IsFalse(TestStruct.Equals(new object()));
    }

    [Test]
    public void OperatorIs_TestStructTestStruct_IsTrue()
    {
    var l = TestStruct;
    var r = TestStruct;
    Assert.IsTrue(l == r);
    }

    [Test]
    public void OperatorIsNot_TestStructTestStruct_IsFalse()
    {
    var l = TestStruct;
    var r = TestStruct;
    Assert.IsFalse(l != r);
    }

    #endregion

    #region IComparable tests

    /// <summary>Orders a list of @(Model.ClassLongName)s ascending.</summary>
    [Test]
    public void OrderBy_@(Model.ClassName)_AreEqual()
    {
    var item0 = @(Model.ClassName).Parse("ComplexRegexPatternA");
    var item1 = @(Model.ClassName).Parse("ComplexRegexPatternB");
    var item2 = @(Model.ClassName).Parse("ComplexRegexPatternC");
    var item3 = @(Model.ClassName).Parse("ComplexRegexPatternD");

    var inp = new List<@(Model.ClassName)>
    () { @(Model.ClassName).Empty, item3, item2, item0, item1, @(Model.ClassName).Empty };
    var exp = new List<@(Model.ClassName)>
    () { @(Model.ClassName).Empty, @(Model.ClassName).Empty, item0, item1, item2, item3 };
    var act = inp.OrderBy(item => item).ToList();

    CollectionAssert.AreEqual(exp, act);
    }

    /// <summary>Orders a list of @(Model.ClassLongName)s descending.</summary>
    [Test]
    public void OrderByDescending_@(Model.ClassName)_AreEqual()
    {
    var item0 = @(Model.ClassName).Parse("ComplexRegexPatternA");
    var item1 = @(Model.ClassName).Parse("ComplexRegexPatternB");
    var item2 = @(Model.ClassName).Parse("ComplexRegexPatternC");
    var item3 = @(Model.ClassName).Parse("ComplexRegexPatternD");

    var inp = new List<@(Model.ClassName)>
    () { @(Model.ClassName).Empty, item3, item2, item0, item1, @(Model.ClassName).Empty };
    var exp = new List<@(Model.ClassName)>
    () { item3, item2, item1, item0, @(Model.ClassName).Empty, @(Model.ClassName).Empty };
    var act = inp.OrderByDescending(item => item).ToList();

    CollectionAssert.AreEqual(exp, act);
    }

    /// <summary>Compare with a to object casted instance should be fine.</summary>
    [Test]
    public void CompareTo_ObjectTestStruct_0()
    {
    object other = TestStruct;

    var exp = 0;
    var act = TestStruct.CompareTo(other);

    Assert.AreEqual(exp, act);
    }

    /// <summary>Compare with null should throw an exception.</summary>
    [Test]
    public void CompareTo_null_ThrowsArgumentException()
    {
    ExceptionAssert.CatchArgumentException
    (() =>
    {
    TestStruct.CompareTo(null);
    },
    "obj",
    "Argument must be @(Model.a) @(Model.ClassLongName)"
    );
    }
    /// <summary>Compare with a random object should throw an exception.</summary>
    [Test]
    public void CompareTo_newObject_ThrowsArgumentException()
    {
    ExceptionAssert.CatchArgumentException
    (() =>
    {
    TestStruct.CompareTo(new object());
    },
    "obj",
    "Argument must be @(Model.a) @(Model.ClassLongName)"
    );
    }
    @if (Model.UnderlyingType != typeof(string))
    {<text>
            [Test]
            public void LessThan_17LT19_IsTrue()
            {
            @(Model.ClassName) l = 17;
            @(Model.ClassName) r = 19;

            Assert.IsTrue(l < r);
            }
            [Test]
            public void GreaterThan_21LT19_IsTrue()
            {
            @(Model.ClassName) l = 21;
            @(Model.ClassName) r = 19;

            Assert.IsTrue(l > r);
            }

            [Test]
            public void LessThanOrEqual_17LT19_IsTrue()
            {
            @(Model.ClassName) l = 17;
            @(Model.ClassName) r = 19;

            Assert.IsTrue(l <= r);
            }
            [Test]
            public void GreaterThanOrEqual_21LT19_IsTrue()
            {
            @(Model.ClassName) l = 21;
            @(Model.ClassName) r = 19;

            Assert.IsTrue(l >= r);
            }

            [Test]
            public void LessThanOrEqual_17LT17_IsTrue()
            {
            @(Model.ClassName) l = 17;
            @(Model.ClassName) r = 17;

            Assert.IsTrue(l <= r);
            }
            [Test]
            public void GreaterThanOrEqual_21LT21_IsTrue()
            {
            @(Model.ClassName) l = 21;
            @(Model.ClassName) r = 21;

            Assert.IsTrue(l >= r);
            }
    </text>}
    #endregion

    #region Casting tests

    [Test]
    public void Explicit_StringTo@(Model.ClassName)_AreEqual()
    {
    var exp = TestStruct;
    var act = (@(Model.ClassName))TestStruct.ToString();

    Assert.AreEqual(exp, act);
    }
    [Test]
    public void Explicit_@(Model.ClassName)ToString_AreEqual()
    {
    var exp = TestStruct.ToString();
    var act = (string)TestStruct;

    Assert.AreEqual(exp, act);
    }

    @if (Model.UnderlyingType == typeof(System.Int16) || Model.UnderlyingType == typeof(System.Int32) || Model.UnderlyingType == typeof(System.Int64))
    {<text>
            [Test]
            public void Explicit_Int32To@(Model.ClassName)_AreEqual()
            {
            var exp = TestStruct;
            var act = (@(Model.ClassName))123456789;

            Assert.AreEqual(exp, act);
            }
            [Test]
            public void Explicit_@(Model.ClassName)ToInt32_AreEqual()
            {
            var exp = 123456789;
            var act = (Int32)TestStruct;

            Assert.AreEqual(exp, act);
            }
    </text>}
    #endregion

    #region Properties
    @if (Model.UnderlyingType == typeof(string))
    {<text>
            [Test]
            public void Length_DefaultValue_0()
            {
            var exp = 0;
            var act = @(Model.ClassName).Empty.Length;
            Assert.AreEqual(exp, act);
            }
            [Test]
            public void Length_TestStruct_IntValue()
            {
            var exp = -10;
            var act = TestStruct.Length;
            Assert.AreEqual(exp, act);
            }
    </text>}
    #endregion

    #region Type converter tests

    [Test]
    public void ConverterExists_@(Model.ClassName)_IsTrue()
    {
    TypeConverterAssert.ConverterExists(typeof(@(Model.ClassName)));
    }

    [Test]
    public void CanNotConvertFromInt32_@(Model.ClassName)_IsTrue()
    {
    TypeConverterAssert.CanNotConvertFrom(typeof(@(Model.ClassName)), typeof(Int32));
    }
    [Test]
    public void CanNotConvertToInt32_@(Model.ClassName)_IsTrue()
    {
    TypeConverterAssert.CanNotConvertTo(typeof(@(Model.ClassName)), typeof(Int32));
    }

    [Test]
    public void CanConvertFromString_@(Model.ClassName)_IsTrue()
    {
    TypeConverterAssert.CanConvertFromString(typeof(@(Model.ClassName)));
    }

    [Test]
    public void CanConvertToString_@(Model.ClassName)_IsTrue()
    {
    TypeConverterAssert.CanConvertToString(typeof(@(Model.ClassName)));
    }

    [Test]
    public void ConvertFrom_StringNull_@(Model.ClassName)Empty()
    {
    using (new CultureInfoScope("en-GB"))
    {
    TypeConverterAssert.ConvertFromEquals(@(Model.ClassName).Empty, (string)null);
    }
    }

    [Test]
    public void ConvertFrom_StringEmpty_@(Model.ClassName)Empty()
    {
    using (new CultureInfoScope("en-GB"))
    {
    TypeConverterAssert.ConvertFromEquals(@(Model.ClassName).Empty, string.Empty);
    }
    }

    [Test]
    public void ConvertFromString_StringValue_TestStruct()
    {
    using (new CultureInfoScope("en-GB"))
    {
    TypeConverterAssert.ConvertFromEquals(TestStruct, TestStruct.ToString());
    }
    }

    [Test]
    public void ConvertFromInstanceDescriptor_@(Model.ClassName)_Successful()
    {
    TypeConverterAssert.ConvertFromInstanceDescriptor(typeof(@(Model.ClassName)));
    }

    [Test]
    public void ConvertToString_TestStruct_StringValue()
    {
    using (new CultureInfoScope("en-GB"))
    {
    TypeConverterAssert.ConvertToStringEquals(TestStruct.ToString(), TestStruct);
    }
    }

    #endregion
    #region IsValid tests

    [TestCase(null)]
    [TestCase("")]
    [TestCase("Complex")]
    public void IsInvalid_String(string pattern)
    {
    Assert.IsFalse(@(Model.ClassName).IsValid(pattern));
    }
    @if (Model.UnderlyingType != typeof(string))
    {<text>
            [Test]
            public void IsInvalid_@Model.UnderlyingType?()
            {
            @Model.UnderlyingType? value = null;
            Assert.IsFalse(@(Model.ClassName).IsValid(value));
            }
    </text>
}
    [Test]
    public void IsValid_Data_IsTrue()
    {
    Assert.IsTrue(@(Model.ClassName).IsValid("ComplexPattern"));
    }
    #endregion
    }

    [Serializable]
    public class @Model.ClassNameSerializeObject
    {
    public int Id { get; set; }
    public @Model.ClassName Obj { get; set; }
    public DateTime Date { get; set; }
    }
    }
